apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: release
spec:
  pipelineSpec:
    tasks:
    - name: from-build-pack
      resources: {}
      taskSpec:
        metadata: {}
        stepTemplate:
          env:
          - name: NPM_CONFIG_USERCONFIG
            value: /tekton/home/npm/.npmrc
          - name: HOME
            value: /tekton/home
          envFrom:
          - secretRef:
              name: jx-boot-job-env-vars
              optional: true
          name: ""
          resources:
            limits: {}
          volumeMounts:
          - mountPath: /tekton/home/npm
            name: npmrc
          workingDir: /workspace/source
        steps:
        - env:
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                key: password
                name: tekton-git
          - name: GIT_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: tekton-git
          image: ghcr.io/jenkins-x/jx-release-version:2.7.10
          name: next-version
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx-release-version --tag > VERSION
        - image: ghcr.io/jenkins-x/jx-boot:3.16.24
          name: jx-variables
          resources:
            # set requests for the pod here
            requests:
              cpu: 400m
              memory: 512Mi
          script: |
            #!/usr/bin/env sh
            jx gitops variables
        - image: node:22-slim
          name: build-npm-install
          resources: {}
          script: |
            #!/bin/sh
            npm install
        - image: node:22-slim
          name: build-npm-test
          resources: {}
          script: |
            #!/bin/sh
            CI=true DISPLAY=:99 npm test
        - image: node:22-slim
          name: build-ui-build
          resources: {}
          script: |
            #!/bin/sh
            npm run build
        - image: ghcr.io/jenkins-x/jx-registry:0.1.17
          name: check-registry
          resources: {}
        - image: gcr.io/kaniko-project/executor:v1.9.1-debug
          name: build-container-build
          resources: {}
          script: |
            #!/busybox/sh
            source .jx/variables.sh
            cp /tekton/creds/.docker/config.json /kaniko/.docker/config.json
            /kaniko/executor $KANIKO_FLAGS --context=/workspace/source --dockerfile=${DOCKERFILE_PATH:-Dockerfile} --destination=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION
        - image: ghcr.io/jenkins-x/jx-boot:3.16.24
          name: promote-changelog
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh

            if [ -d "charts/$REPO_NAME" ]; then
            jx gitops yset -p version -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p appVersion -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            yq e -i '.sources = ((.sources // []) + "'$REPO_URL'" | unique)' ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p 'image.repository' -v $DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME -f ./charts/$REPO_NAME/values.yaml
            jx gitops yset -p 'image.tag' -v "$VERSION" -f ./charts/$REPO_NAME/values.yaml;
            else echo no charts; fi

            git add * || true
            git commit -a -m "chore: release $VERSION" --allow-empty
            git tag -fa v$VERSION -m "Release version $VERSION"
            git push --force origin v$VERSION

            jx changelog create --version v${VERSION} --output-markdown ../changelog.md
        - image: ghcr.io/jenkins-x/jx-boot:3.16.24
          name: promote-helm-release
          resources: {}
          script: |
            #!/usr/bin/env bash
            source .jx/variables.sh

            # Function to promote helm release with adaptive retry logic for concurrent pipelines
            promote_helm_with_retry() {
              local max_attempts=5
              local attempt=1
              local base_delay=2
              local max_delay=30

              echo "üöÄ Starting helm release promotion with adaptive retry logic..."

              # Configure git identity using existing credentials or defaults
              echo "üîß Configuring git identity..."
              if [ -n "$GIT_USER" ]; then
                git config --global user.name "$GIT_USER"
                echo "‚úÖ Using GIT_USER: $GIT_USER"
              else
                git config --global user.name "Tekton Bot"
                echo "‚úÖ Using default name: Tekton Bot"
              fi

              # Try to extract email from GIT_USER or use default
              if [ -n "$GIT_USER" ] && echo "$GIT_USER" | grep -q "@"; then
                git config --global user.email "$GIT_USER"
                echo "‚úÖ Using GIT_USER as email: $GIT_USER"
              elif [ -n "$GIT_USER_EMAIL" ]; then
                git config --global user.email "$GIT_USER_EMAIL"
                echo "‚úÖ Using GIT_USER_EMAIL: $GIT_USER_EMAIL"
              else
                git config --global user.email "tekton@jenkins-x.io"
                echo "‚úÖ Using default email: tekton@jenkins-x.io"
              fi

              # Show current git config for debugging
              echo "üìã Current git configuration:"
              git config --global user.name
              git config --global user.email

              echo "‚ÑπÔ∏è  Note: jx gitops helm release manages its own git operations in temporary directories"

              while [ $attempt -le $max_attempts ]; do
                echo "üì¶ Helm promotion attempt $attempt of $max_attempts..."

                # Try to promote the helm release
                if jx gitops helm release; then
                  echo "‚úÖ Helm release promotion successful on attempt $attempt"
                  return 0
                fi

                echo "‚ùå Helm release promotion failed on attempt $attempt"

                # If not the last attempt, calculate adaptive delay
                if [ $attempt -lt $max_attempts ]; then
                  # Exponential backoff with cap: min(base_delay * 2^(attempt-1), max_delay)
                  local wait_time=$((base_delay * (1 << (attempt - 1))))
                  if [ $wait_time -gt $max_delay ]; then
                    wait_time=$max_delay
                  fi

                  # Add jitter (20% of wait time) to reduce thundering herd
                  local jitter=$((wait_time / 5))
                  local random_jitter=$((RANDOM % (jitter + 1)))
                  wait_time=$((wait_time + random_jitter))

                  echo "‚è≥ Waiting ${wait_time}s before retry (adaptive backoff + jitter)..."
                  sleep $wait_time

                  echo "üîÑ Ready for next attempt (jx will fetch fresh repository)..."
                fi

                ((attempt++))
              done

              echo "üí• All helm promotion attempts failed after $max_attempts tries"
              echo "üîç This might indicate a persistent issue with the helm repository or configuration"
              return 1
            }

            # Execute the retry function
            promote_helm_with_retry

            # Check the exit status
            if [ $? -eq 0 ]; then
              echo "üéâ Helm release promotion completed successfully!"
            else
              echo "üö® Helm release promotion failed after all retry attempts"
              exit 1
            fi
        - image: ghcr.io/jenkins-x-plugins/jx-promote:0.6.28
          name: promote-jx-promote
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx promote -b --all --timeout 1h --no-poll --add-changelog ../changelog.md
        volumes:
        - name: npmrc
          secret:
            optional: true
            secretName: npmrc
  podTemplate: {}
  serviceAccountName: tekton-bot
  timeout: 12h0m0s
status: {}
