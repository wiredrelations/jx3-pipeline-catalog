apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: release
spec:
  pipelineSpec:
    tasks:
    - name: from-build-pack
      resources: {}
      taskSpec:
        metadata: {}
        stepTemplate:
          env:
          - name: MAVEN_OPTS
            value: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=25
              -Dmaven.wagon.http.retryHandler.count=3
          - name: HOME
            value: /tekton/home
          envFrom:
          - secretRef:
              name: jx-boot-job-env-vars
              optional: true
          name: ""
          resources:
            limits: {}
          volumeMounts:
          - mountPath: /root/.m2/
            name: maven-settings
          - mountPath: /root/.gnupg
            name: release-gpg
          workingDir: /workspace/source
        steps:
        - env:
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                key: password
                name: tekton-git
          - name: GIT_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: tekton-git
          image: ghcr.io/jenkins-x/jx-release-version:2.7.10
          name: next-version
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx-release-version --tag > VERSION
        - image: ghcr.io/jenkins-x/jx-boot:3.11.98
          name: jx-variables
          resources:
            # set requests for the pod here
            requests:
              cpu: 400m
              memory: 512Mi
          script: |
            #!/usr/bin/env sh
            jx gitops variables
        - image: maven:3.9-amazoncorretto-21
          name: build-mvn-deploy
          resources: {}
          script: |
            #!/usr/bin/env bash
            source .jx/variables.sh

            # modify the pom.xml
            echo "upgrading the pom to version $VERSION"
            mvn versions:set -DnewVersion=$VERSION

            mvn --no-transfer-progress --update-snapshots clean deploy
        - image: maven:3.9-amazoncorretto-21
          name: build-mvn-install
          resources: {}
          script: |
            #!/usr/bin/env bash
            source .jx/variables.sh

            # modify the pom.xml
            echo "upgrading the pom to version $VERSION"
            mvn versions:set -DnewVersion=$VERSION
            mvn --no-transfer-progress --update-snapshots install
        - image: ghcr.io/jenkins-x/jx-registry:0.1.15
          name: check-registry
          resources: {}
        - image: gcr.io/kaniko-project/executor:v1.9.1-debug
          name: build-container-build
          resources: {}
          script: |
            #!/busybox/sh
            source .jx/variables.sh
            cp /tekton/creds/.docker/config.json /kaniko/.docker/config.json
            /kaniko/executor $KANIKO_FLAGS --context=/workspace/source --dockerfile=${DOCKERFILE_PATH:-Dockerfile} --destination=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION
        - image: ghcr.io/jenkins-x/jx-boot:3.11.98
          name: promote-changelog
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh

            if [ -d "charts/$REPO_NAME" ]; then
            jx gitops yset -p version -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p appVersion -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            yq e -i '.sources = ((.sources // []) + "'$REPO_URL'" | unique)' ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p 'image.repository' -v $DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME -f ./charts/$REPO_NAME/values.yaml
            jx gitops yset -p 'image.tag' -v "$VERSION" -f ./charts/$REPO_NAME/values.yaml;
            else echo no charts; fi

            jx changelog create --version v${VERSION} --output-markdown ../changelog.md

            git add * || true
            git commit -a -m "chore: release $VERSION" --allow-empty
            git tag -fa v$VERSION -m "Release version $VERSION"
            git push --force origin v$VERSION
        - image: ghcr.io/jenkins-x/jx-boot:3.11.98
          name: promote-helm-release
          resources: { }
          script: |
            #!/usr/bin/env bash
            source .jx/variables.sh

            # Function to promote helm release with retry logic for concurrent pipelines
            promote_helm_with_retry() {
              local max_attempts=5
              local attempt=1
              local base_delay=3

              echo "🚀 Starting helm release promotion with retry logic..."

              while [ $attempt -le $max_attempts ]; do
                echo "📦 Helm promotion attempt $attempt of $max_attempts..."

                # Try to promote the helm release
                if jx gitops helm release; then
                  echo "✅ Helm release promotion successful on attempt $attempt"
                  return 0
                fi

                echo "❌ Helm release promotion failed on attempt $attempt"

                # If not the last attempt, prepare for retry
                if [ $attempt -lt $max_attempts ]; then
                  local wait_time=$((attempt * base_delay))
                  echo "⏳ Waiting ${wait_time}s before retry (exponential backoff)..."
                  sleep $wait_time

                  # Try to sync with remote changes to resolve conflicts
                  echo "🔄 Syncing with remote changes to resolve potential conflicts..."

                  # Navigate to charts directory if it exists
                  if [ -d "charts" ]; then
                    cd charts
                    echo "📍 Current directory: $(pwd)"

                    # Fetch latest changes from remote
                    echo "📥 Fetching latest changes from remote..."
                    git fetch origin 2>/dev/null || {
                      echo "⚠️  Failed to fetch from remote, continuing anyway..."
                    }

                    # Try to pull and rebase changes
                    echo "🔀 Attempting to pull and rebase changes..."
                    git pull origin gh-pages --rebase 2>/dev/null || {
                      echo "⚠️  Failed to pull/rebase, this might be expected for new repositories"
                    }

                    # Return to original directory
                    cd - > /dev/null
                  else
                    echo "📁 No charts directory found, skipping git sync"
                  fi
                fi

                ((attempt++))
              done

              echo "💥 All helm promotion attempts failed after $max_attempts tries"
              echo "🔍 This might indicate a persistent issue with the helm repository or configuration"
              return 1
            }

            # Execute the retry function
            promote_helm_with_retry

            # Check the exit status
            if [ $? -eq 0 ]; then
              echo "🎉 Helm release promotion completed successfully!"
            else
              echo "🚨 Helm release promotion failed after all retry attempts"
              exit 1
            fi
        - image: ghcr.io/jenkins-x-plugins/jx-promote:0.6.22
          name: promote-jx-promote
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx promote -b --all --timeout 1h --no-poll --add-changelog ../changelog.md
        volumes:
        - name: maven-settings
          secret:
            secretName: jenkins-maven-settings
        - name: release-gpg
          secret:
            optional: true
            secretName: jenkins-release-gpg
  podTemplate: {}
  serviceAccountName: tekton-bot
  timeout: 12h0m0s
status: {}
